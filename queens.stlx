// davis-putnam.stlx

// clauses ist eine Menge von Klauseln und literals ist eine Menge
// von Literalen.  Der Aufruf DavisPutnam(clauses, literals) versucht
// eine Lösung der Menge
//                        clauses
// zu berechnen.  Wenn dies gelingt, wird eine Menge von Unit-Klauseln
// zurück gegeben, die keine komplementären Literale enthält.  Aus dieser
// Menge kann dann unmittelbar eine Belegung berechnet werden, die clauses
// löst.
//       Wenn die Menge clauses unlösbar ist, wird { {} } zurück gegeben.
// Das Argument literals dient der Buchhaltung bei den rekursiven Aufrufen.
// Hier werden alle die Literale aufgesammelt, mit denen die Menge clauses
// schon reduziert wurde.  Beim ersten Aufruf ist diese Menge leer.
davisPutnam := procedure(clauses, literals) {
    clauses := saturate(clauses);
    if ({} in clauses) {
        return { {} };
    }
    if (forall (c in clauses | #c == 1)) {
        return clauses;
    }
    l := selectLiteral(clauses, literals);
    notL := negateLiteral(l);
    r := davisPutnam(clauses + { {l} }, literals + { l, notL });
    if (r != { {} }) {
        return r;
    }
    return davisPutnam(clauses + { {notL} }, literals + { l, notL });
};
// Gegeben ist eine Menge S von Klauseln.  Der Aufruf saturate(S) berechnet alle
// Klauseln, die mit Unit Schnitten aus S ableitbar sind.  Zusätzlich werden alle
// Klauseln, die von Unit-Klauseln subsumiert werden, aus der Menge S entfernt.
saturate := procedure(s) {
    units := { k : k in s | #k == 1 };
    used  := {};
    while (units != {}) {
        unit  := arb(units);
        used  += { unit };
        l     := arb(unit);
        s     := reduce(s, l);
        units := { k : k in s | #k == 1 } - used;
    }
    return s;
};
// Die Prozedur reduce(s,l) führt alle Unit-Schnitte und alle Unit-Subsumptionen,
// die mit der Unit-Klausel {l} möglich sind, durch.
reduce := procedure(s, l) {
    notL := negateLiteral(l);
    return   { k - { notL } : k in s | notL in k }
           + { k : k in s | !(notL in k) && !(l in k) }
           + { {l} };
};
// Wir wählen ein beliebiges Literal aus einer beliebigen Klausel,
// so dass weder dieses Literal noch die Negation benutzt wurden.
selectLiteral := procedure(s, forbidden) {
    return arb(+/ s - forbidden);
};
// Diese Prozedur berechnet das Komplement des Literals l.
negateLiteral := procedure(l) {
    if (isList(l)) {
      return l[2];
    } else {
      return ["-", l];
    }
};

// ========================================
// queens.stlx
atMostOne := procedure(s) {
    return { { ["-", p], ["-", q] } : p in s, q in s | p != q };
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the given row.
atMostOneInRow := procedure(row, n) {
    return atMostOne({ "" + row + column : column in [1 .. n] });
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at least one queen on the given column.
oneInColumn := procedure(column, n) {
    return { { "" + row + column : row in { 1 .. n } } };
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the diagonal satisfying the equation 
//    row + column = k.
atMostOneInUpperDiagonal := procedure(k, n) {
    s := { "" + r + c : c in [1..n], r in [1..n] | r + c == k };
    return atMostOne(s);
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the diagonal satisfying the equation 
//    row - column = k.
atMostOneInLowerDiagonal := procedure(k, n) {
    s := { "" + r + c : c in [1..n], r in [1..n] | r - c == k };
    return atMostOne(s);
};
// The procedure allClauses takes as input a matrix (i.e. a list of lists)
// of propositional variables.  Each of these variables represents a field
// of a chess board.  The variables express the fact that the corresponding
// field is occupied by a queen.
// The procedure computes as output a formula in KNF. This formula expresses
// the fact that no queen on the board threatens another queen, i.e. two
// queens are not
//             on the same row,    or
//             on the same column, or
//             on the same diagonal.
// Furthermore the formula guarantees that there is a queen in every row.
// The formula is represented as a set of clauses.  Each of the clauses
// is represented as a set of literals.
//
// In order to simplify the resulting formula, the following observation
// can be used:
// If there are no two queens on the same column and there is at least one
// queen in every row, then it follows that there is exactly one queen in
// every row, since otherwise there would be more than 8 queens on the board
// and that is only possible if there is one column containing more than one
// queen.
allClauses := procedure(n) {
    return   +/ { atMostOneInRow(row, n)         : row in {1..n}        }
           + +/ { atMostOneInLowerDiagonal(k, n) : k in {-(n-2) .. n-2} }
           + +/ { atMostOneInUpperDiagonal(k, n) : k in {3 .. 2*n - 1}  }
           + +/ { oneInColumn(column, n)         : column in {1 .. n}   };
};
// Solve the n-queens puzzle.
solve := procedure(n) {
    clauses  := allClauses(n);
    solution := davisPutnam(clauses, {});
    if (solution != { {} }) {
        // print(solution);
        printBoard(solution, n);
    } else {
        print("The problem is not solvable for $n$ queens!");
        print("Try to increase the number of queens.");
    }
};
// i is a set of unit clauses and board is a matrix of propositional 
// variables representing a chessboard.   This procedure prints the 
// chessboard.
printBoard := procedure(i, n) {
    if (i == { {} }) {
        return;
    }
    print( "        " + ((8*n+1) * "-") );
    for (row in [1..n]) {
        line := "        |";
        for (col in [1..n]) {
            line += "       |";
        }
        print(line);
        line := "        |";
        for (col in [1..n]) {
            if ({ "" + row + col } in i) {
                line += "   Q   |";
            } else {
                line += "       |";
            }
        }
        print(line);
        line := "        |";
        for (col in [1..n]) {
            line += "       |";
        }
        print(line);
        print( "        " + ((8*n+1) * "-") );
    }
};
solve(8);
